<?php

/**
 * @file
 * Acquia Cloud API module provides an interfact to manage your Acquia Hosting
 * from your Drupal Site.
 */

/**
 * Implements hook_menu().
 */
function acquia_cloud_dashboard_menu() {
  $items['admin/config/cloud-api'] = array(
    'title' => 'Acquia Cloud Dashboard',
    'description' => 'Control Acquia Cloud Hosting right from Drupal Site',
    'position' => 'right',
    'weight' => -19,
    'route_name' => 'acquia_cloud_dashboard.cloud_api',
  );
  $items['admin/config/cloud-api/view'] = array(
    'title' => 'Acquia Cloud API Report',
    'description' => 'Report of your Acquia Cloud',
    'route_name' => 'acquia_cloud_dashboard.report',
  );
  $items['admin/config/cloud-api/domains'] = array(
    'title' => 'Acquia Cloud Domains',
    'description' => 'Control the domains associated with your Acquia Cloud account.',
    'route_name' => 'acquia_cloud_dashboard.domains',
  );
  $items['admin/config/cloud-api/configure'] = array(
    'title' => 'Acquia Cloud API Configuration',
    'description' => 'Configuring of your Acquia Cloud',
    'route_name' => 'acquia_cloud_dashboard.configure',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function acquia_cloud_dashboard_permission() {
  return array(
    'access cloud api report' => array(
      'title' => t('Access Cloud API Report'),
      'description' => t('Allows user to access report generated by Cloud API module for the subscription'),
    ),
    'refresh cloud api report' => array(
      'title' => t('Manually Refresh Cloud API Report'),
      'description' => t('Allows user to manually refresh report generated by Cloud API'),
    ),
    'configure cloud api' => array(
      'title' => t('Configure Cloud API'),
      'description' => t('Allows user to configure Acquia Cloud API connectivity'),
    ),
    'add domains cloud api' => array(
      'title' => t('Add Domains on Cloud API'),
      'description' => t('Allows user to add domains on to Acquia Cloud'),
    ),
    'delete domains cloud api' => array(
      'title' => t('Delete Domains on Cloud API'),
      'description' => t('Allows user to delete domains on to Acquia Cloud'),
    ),
    'purge domain cache cloud api' => array(
      'title' => t('Purge Domains Varnish cache on Cloud API'),
      'description' => t('Allows user to purge domains Varnish Cache on to Acquia Cloud'),
    ),
    'add key cloud api' => array(
      'title' => t('Add SSH Keys on Cloud API'),
      'description' => t('Allows user to add SSH Keys on to Acquia Cloud'),
    ),
    'delete key cloud api' => array(
      'title' => t('Delete SSH Keys on Cloud API'),
      'description' => t('Allows user to delete SSH Keys on to Acquia Cloud'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function acquia_cloud_dashboard_theme() {
  return array(
    'acquia_dashboard_report' => array(
      'template' => 'acquia-dashboard-report',
      'variables' => array('report' => NULL, 'updated' => NULL),
    ),
  );
}

/**
 * Helper function for the batch to update sites info.
 */
function acquia_cloud_dashboard_update_sites(&$context) {
  $api = new \Drupal\acquia_cloud_dashboard\CloudAPIHelper();
  $context['message'] = t('Refreshing sites list.');
  $sites_data = $api->callMethod("sites");

  if ($sites_data) {
    $site_names = array();
    foreach ($sites_data as $value) {
      $site_raw_name = explode(':', $value);
      $site_name = $site_raw_name[1];

      // Fetch the site info.
      $site_info_array = $api->callMethod("sites/" . $site_raw_name[1]);
      $site_names[$site_name] = array(
        'name' => $site_name,
        'info' => $site_info_array,
      );
    }

    $context['results']['sites'] = $site_names;
  }
}

/**
 * Helper function for the batch to update ssh keys info.
 */
function acquia_cloud_dashboard_update_ssh_keys(&$context) {
  $api = new \Drupal\acquia_cloud_dashboard\CloudAPIHelper();
  if (count($context['results']['sites'])) {
    if (empty($context['sandbox']['progress'])) {
      $context['sandbox']['progress'] = 0;
      $context['sandbox']['current'] = 0;
      $context['sandbox']['max'] = count($context['results']['sites']);
      $context['sandbox']['sites'] = array_keys($context['results']['sites']);
    }
    $progress = $context['sandbox']['progress'];
    $site_name = $context['sandbox']['sites'][$progress];
    $context['message'] = t('Refreshing SSH keys for @site', array('@site' => $site_name));

    $site_ssh_keys_array = $api->callMethod("sites/$site_name/sshkeys");
    $site_ssh_keys = array();
    foreach ($site_ssh_keys_array as $ssh_key) {
      $site_ssh_keys[] = array(
        'id' => $ssh_key['id'],
        'nickname' => $ssh_key['nickname'],
        'public' => $ssh_key['ssh_pub_key'],
        'short' => drupal_substr($ssh_key['ssh_pub_key'], 0, 10) . "...",
      );
    }
    $context['results']['sites'][$site_name]['keys'] = $site_ssh_keys;
    $context['sandbox']['progress']++;

    if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
      $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
    }
  }
}

/**
 * Helper function for the batch to update db info.
 */
function acquia_cloud_dashboard_update_dbs(&$context) {
  $api = new \Drupal\acquia_cloud_dashboard\CloudAPIHelper();
  if (count($context['results']['sites'])) {
    if (empty($context['sandbox']['progress'])) {
      $context['sandbox']['progress'] = 0;
      $context['sandbox']['current'] = 0;
      $context['sandbox']['max'] = count($context['results']['sites']);
      $context['sandbox']['sites'] = array_keys($context['results']['sites']);
    }
    $progress = $context['sandbox']['progress'];
    $site_name = $context['sandbox']['sites'][$progress];
    $context['message'] = t('Refreshing databases for @site', array('@site' => $site_name));

    $site_databases_array = $api->callMethod("sites/$site_name/dbs");
    $site_dbs = array();
    foreach ($site_databases_array as $database) {
      $site_dbs[] = $database['name'];
    }

    $context['results']['sites'][$site_name]['dbs'] = $site_dbs;
    $context['sandbox']['progress']++;

    if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
      $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
    }
  }
}

/**
 * Helper function for the batch to update environments info.
 */
function acquia_cloud_dashboard_update_environments(&$context) {
  $api = new \Drupal\acquia_cloud_dashboard\CloudAPIHelper();
  if (count($context['results']['sites'])) {
    if (empty($context['sandbox']['progress'])) {
      $context['sandbox']['progress'] = 0;
      $context['sandbox']['current'] = 0;
      $context['sandbox']['max'] = count($context['results']['sites']);
      $context['sandbox']['sites'] = array_keys($context['results']['sites']);
    }
    $progress = $context['sandbox']['progress'];
    $site_name = $context['sandbox']['sites'][$progress];
    $context['message'] = t('Refreshing environment details for @site', array('@site' => $site_name));

    $site_envs_array = $api->callMethod("sites/$site_name/envs");
    $site_envs = array();
    foreach ($site_envs_array as $environment) {
      $env = $environment['name'];

      // Fetch the domains associated with this environment.
      $env_domains_array = $api->callMethod("sites/$site_name/envs/$env/domains");
      $env_domains = array();
      foreach ($env_domains_array as $domain) {
        $env_domains[] = $domain['name'];
      }

      // Fetch the servers associated with this environment.
      $env_servers_array = $api->callMethod("sites/$site_name/envs/$env/servers");
      $env_servers = array();
      foreach ($env_servers_array as $server) {
        $server_name = $server['name'];

        // Fetch the server info.
        $server_info_array = $api->callMethod("sites/$site_name/envs/$env/servers/$server_name");
        $server_services = $server_info_array['services'];
        unset($server_info_array['services']);
        $env_servers[] = array(
          'name' => $server_name,
          'info' => $server_info_array,
          'services' => $server_services,
        );
      }

      $site_envs[$env] = array(
        'name' => $env,
        'domains' => $env_domains,
        'servers' => $env_servers,
      );
    }

    $context['results']['sites'][$site_name]['environments'] = $site_envs;
    $context['sandbox']['progress']++;

    if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
      $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
    }
  }
}

/**
 * Helper function for the batch to update tasks info.
 */
function acquia_cloud_dashboard_update_tasks(&$context) {
  $api = new \Drupal\acquia_cloud_dashboard\CloudAPIHelper();
  if (count($context['results']['sites'])) {
    if (empty($context['sandbox']['progress'])) {
      $context['sandbox']['progress'] = 0;
      $context['sandbox']['current'] = 0;
      $context['sandbox']['max'] = count($context['results']['sites']);
      $context['sandbox']['sites'] = array_keys($context['results']['sites']);
    }
    $progress = $context['sandbox']['progress'];
    $site_name = $context['sandbox']['sites'][$progress];
    $context['message'] = t('Refreshing task details for @site', array('@site' => $site_name));

    $task_list_raw = $api->callMethod("sites/$site_name/tasks");

    foreach ($task_list_raw as $key => $value) {
      $task_list_raw[$key]['started'] = date('l jS \of F Y h:i:s A', $value['started']);
    }

    $task_limit = \Drupal::config('acquia_cloud_dashboard.settings')->get('task_limit');
    $tasks_list_trimmed = array_reverse(array_slice($task_list_raw, -$task_limit));

    $context['results']['sites'][$site_name]['tasks'] = $tasks_list_trimmed;
    $context['sandbox']['progress']++;

    if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
      $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
    }
  }
}

/**
 * Helper function showing the batch report generation completion.
 */
function acquia_cloud_dashboard_update_finished($success, $results, $operations) {
  if (isset($results['sites']) && count($results['sites'])) {
    \Drupal::config('acquia_cloud_dashboard.settings')
      ->set('report', $results)
      ->set('last_generated', REQUEST_TIME)
      ->save();
    drupal_set_message(t('Cloud Status Report has been refreshed'));
  }
  else {
    drupal_set_message(t('There was an issue with refreshing your Cloud Report'), 'warning');
  }
}
